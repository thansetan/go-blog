definitions:
  dto.CommentRequest:
    properties:
      comment:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.PostRequest:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.UpdateBlogRequest:
    properties:
      new_name:
        type: string
    type: object
  dto.UpdatePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      description: Logging in by providing required data to get JWT
      parameters:
      - description: the body to login as a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Login as a user
      tags:
      - Auth
  /auth/register:
    post:
      description: 'Create a new account by providing required data. This will automatically
        create a blog named: <name>''s Blog'
      parameters:
      - description: the body to register a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      summary: Create a user account
      tags:
      - Auth
  /blog/{username}:
    get:
      description: Get information about user blog
      parameters:
      - description: Username of the user
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get user blog information
      tags:
      - Blog
  /blog/{username}/posts:
    get:
      description: Get all user's blog posts by providing username
      parameters:
      - description: Username of the user
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get all blog posts of a user
      tags:
      - Post
  /blog/{username}/posts/{slug}:
    get:
      description: Get a user post by providing their username and the post slug
      parameters:
      - description: Username of the user
        in: path
        name: username
        required: true
        type: string
      - description: Slug of the post
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get a user post by slug
      tags:
      - Post
  /blog/{username}/posts/{slug}/comments:
    get:
      description: Get all comments on a post
      parameters:
      - description: blog owner's username
        in: path
        name: username
        required: true
        type: string
      - description: post slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: objects
      summary: Get comments on a post
      tags:
      - Comment
    post:
      description: Create a comment on a blog post by providing required data
      parameters:
      - description: the body to create a comment
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.CommentRequest'
      - description: blog owner's username
        in: path
        name: username
        required: true
        type: string
      - description: post slug
        in: path
        name: slug
        required: true
        type: string
      - description: Authorization. Use 'Bearer <your-token>'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Create a comment on a blog post
      tags:
      - Comment
  /blog/{username}/posts/{slug}/comments/{comment_id}:
    delete:
      description: Delete comment by ID
      parameters:
      - description: blog owner's username
        in: path
        name: username
        required: true
        type: string
      - description: post slug
        in: path
        name: slug
        required: true
        type: string
      - description: comment ID
        in: path
        name: comment_id
        required: true
        type: integer
      - description: Authorization. Use 'Bearer <your-token>'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: objects
      security:
      - BearerToken: []
      summary: Delete comment by ID
      tags:
      - Comment
    put:
      description: Edit user's comment on a post by providing comment ID
      parameters:
      - description: blog owner's username
        in: path
        name: username
        required: true
        type: string
      - description: post slug
        in: path
        name: slug
        required: true
        type: string
      - description: body required to modify comment
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.CommentRequest'
      - description: comment ID
        in: path
        name: comment_id
        required: true
        type: integer
      - description: Authorization. Use 'Bearer <your-token>'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: objects
      security:
      - BearerToken: []
      summary: Edit user's comment on a post
      tags:
      - Comment
  /blog/my:
    get:
      description: Get information about my blog
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Get my blog information
      tags:
      - Blog
    put:
      description: Change user's blog name by providing required data
      parameters:
      - description: the body to change user's blog name
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBlogRequest'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Change user's blog name
      tags:
      - Blog
  /blog/my/posts:
    get:
      description: Get all user's blog posts by providing JWT auth
      parameters:
      - description: Authorization. Use 'Bearer <your-token>'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Get all user's blog posts
      tags:
      - Post
    post:
      description: Create a new blog post by providing required data
      parameters:
      - description: the body to create a new post
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.PostRequest'
      - description: Authorization. Use 'Bearer <your-token>'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Create a new blog post
      tags:
      - Post
  /blog/my/posts/{slug}:
    delete:
      description: Delete user blog post by providing the post slug
      parameters:
      - description: Authorization. Use 'Bearer <your-token>'
        in: header
        name: Authorization
        required: true
        type: string
      - description: Slug of the post
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Delete user post by slug
      tags:
      - Post
    put:
      description: Update user blog post by providing the post slug
      parameters:
      - description: Authorization. Use 'Bearer <your-token>'
        in: header
        name: Authorization
        required: true
        type: string
      - description: the body to create a new post
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.PostRequest'
      - description: Slug of the post
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Update user post by slug
      tags:
      - Post
  /my/comments:
    get:
      description: Get current user's comments on all posts
      parameters:
      - description: Authorization. Use 'Bearer <your-token>'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: objects
      security:
      - BearerToken: []
      summary: Get current user's comments
      tags:
      - Comment
  /users/me:
    get:
      description: Get user information about current logged in user
      parameters:
      - description: Authorization. 'Bearer <insert_your_token_here>'
        in: header
        name: Authorization
        required: true
        type: string
      responses: {}
      security:
      - BearerToken: []
      summary: Get current user information
      tags:
      - User
  /users/me/update-password:
    put:
      description: Change user password by providing required data
      parameters:
      - description: the body to change user's password
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePasswordRequest'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Change user password
      tags:
      - User
swagger: "2.0"
